<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>41</ID>
      <Description>"fp"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ELDEN RING
  Version: 
  Date   : 2024-06-21
  Author : ichir

  This script does blah blah blah
}

define(address,"start_protected_game.exe"+437B3F)
define(bytes,89 87 48 01 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"start_protected_game.exe"+437B3F)

label(code)
label(return)

newmem:

code:
  //mov [rdi+00000148],eax
  mov [rdi+00000148],00000190
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rdi+00000148],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: start_protected_game.exe+437B3F

start_protected_game.exe+437B1D: 48 8D 44 24 60     - lea rax,[rsp+60]
start_protected_game.exe+437B22: EB 14              - jmp start_protected_game.exe+437B38
start_protected_game.exe+437B24: 3B D1              - cmp edx,ecx
start_protected_game.exe+437B26: B8 48 01 00 00     - mov eax,00000148
start_protected_game.exe+437B2B: 41 B8 4C 01 00 00  - mov r8d,0000014C
start_protected_game.exe+437B31: 41 0F 4F C0        - cmovg eax,r8d
start_protected_game.exe+437B35: 48 03 C7           - add rax,rdi
start_protected_game.exe+437B38: 8B 00              - mov eax,[rax]
start_protected_game.exe+437B3A: B2 01              - mov dl,01
start_protected_game.exe+437B3C: 49 8B CE           - mov rcx,r14
// ---------- INJECTING HERE ----------
start_protected_game.exe+437B3F: 89 87 48 01 00 00  - mov [rdi+00000148],eax
// ---------- DONE INJECTING  ----------
start_protected_game.exe+437B45: E8 26 42 0C 00     - call start_protected_game.exe+4FBD70
start_protected_game.exe+437B4A: 4C 8B 74 24 30     - mov r14,[rsp+30]
start_protected_game.exe+437B4F: F3 0F 59 C6        - mulss xmm0,xmm6
start_protected_game.exe+437B53: 0F 28 74 24 20     - movaps xmm6,[rsp+20]
start_protected_game.exe+437B58: F3 0F 2C C8        - cvttss2si ecx,xmm0
start_protected_game.exe+437B5C: 89 8F 90 01 00 00  - mov [rdi+00000190],ecx
start_protected_game.exe+437B62: 40 84 F6           - test sil,sil
start_protected_game.exe+437B65: 74 16              - je start_protected_game.exe+437B7D
start_protected_game.exe+437B67: 2B CD              - sub ecx,ebp
start_protected_game.exe+437B69: 85 C9              - test ecx,ecx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>50</ID>
      <Description>"st"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ELDEN RING
  Version: 
  Date   : 2024-06-22
  Author : ichir

  This script does blah blah blah
}

define(address,"start_protected_game.exe"+438522)
define(bytes,89 87 54 01 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"start_protected_game.exe"+438522)

label(code)
label(return)

newmem:

code:
  //mov [rdi+00000154],eax
  mov [rdi+00000154],b0
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rdi+00000154],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: start_protected_game.exe+438522

start_protected_game.exe+4384FA: C7 44 24 40 CE FF FF FF  - mov [rsp+40],FFFFFFCE
start_protected_game.exe+438502: 48 8D 8F 58 01 00 00     - lea rcx,[rdi+00000158]
start_protected_game.exe+438509: 83 FE CE                 - cmp esi,-32
start_protected_game.exe+43850C: 7D 07                    - jnl start_protected_game.exe+438515
start_protected_game.exe+43850E: 48 8D 44 24 40           - lea rax,[rsp+40]
start_protected_game.exe+438513: EB 0B                    - jmp start_protected_game.exe+438520
start_protected_game.exe+438515: 3B 31                    - cmp esi,[rcx]
start_protected_game.exe+438517: 48 8D 44 24 48           - lea rax,[rsp+48]
start_protected_game.exe+43851C: 48 0F 4F C1              - cmovg rax,rcx
start_protected_game.exe+438520: 8B 00                    - mov eax,[rax]
// ---------- INJECTING HERE ----------
start_protected_game.exe+438522: 89 87 54 01 00 00        - mov [rdi+00000154],eax
// ---------- DONE INJECTING  ----------
start_protected_game.exe+438528: 48 8B 5C 24 50           - mov rbx,[rsp+50]
start_protected_game.exe+43852D: 48 8B 74 24 58           - mov rsi,[rsp+58]
start_protected_game.exe+438532: 48 83 C4 30              - add rsp,30
start_protected_game.exe+438536: 5F                       - pop rdi
start_protected_game.exe+438537: C3                       - ret 
start_protected_game.exe+438538: C7 41 08 00 00 00 00     - mov [rcx+08],00000000
start_protected_game.exe+43853F: C3                       - ret 
start_protected_game.exe+438540: 40 53                    - push rbx
start_protected_game.exe+438542: 56                       - push rsi
start_protected_game.exe+438543: 57                       - push rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>58</ID>
      <Description>"money"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ELDEN RING
  Version: 
  Date   : 2024-06-22
  Author : ichir

  This script does blah blah blah
}

define(address,"start_protected_game.exe"+25E13A)
define(bytes,89 41 6C 41 2B C1)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"start_protected_game.exe"+25E13A)

label(code)
label(return)

newmem:

code:
  //mov [rcx+6C],eax
  mov [rcx+6C],fffff
  sub eax,r9d
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rcx+6C],eax
  // sub eax,r9d

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: start_protected_game.exe+25E13A

start_protected_game.exe+25E110: 44 89 44 24 08        - mov [rsp+08],r8d
start_protected_game.exe+25E115: 45 85 C0              - test r8d,r8d
start_protected_game.exe+25E118: 79 07                 - jns start_protected_game.exe+25E121
start_protected_game.exe+25E11A: 48 8D 44 24 10        - lea rax,[rsp+10]
start_protected_game.exe+25E11F: EB 17                 - jmp start_protected_game.exe+25E138
start_protected_game.exe+25E121: 41 81 F8 FF C9 9A 3B  - cmp r8d,3B9AC9FF
start_protected_game.exe+25E128: 48 8D 15 09 7C 78 02  - lea rdx,[start_protected_game.exe+29E5D38]
start_protected_game.exe+25E12F: 48 8D 44 24 08        - lea rax,[rsp+08]
start_protected_game.exe+25E134: 48 0F 4F C2           - cmovg rax,rdx
start_protected_game.exe+25E138: 8B 00                 - mov eax,[rax]
// ---------- INJECTING HERE ----------
start_protected_game.exe+25E13A: 89 41 6C              - mov [rcx+6C],eax
// ---------- DONE INJECTING  ----------
start_protected_game.exe+25E13D: 41 2B C1              - sub eax,r9d
start_protected_game.exe+25E140: 85 C0                 - test eax,eax
start_protected_game.exe+25E142: 7E 4A                 - jle start_protected_game.exe+25E18E
start_protected_game.exe+25E144: 8B 51 70              - mov edx,[rcx+70]
start_protected_game.exe+25E147: 41 BA FF FF FF FF     - mov r10d,FFFFFFFF
start_protected_game.exe+25E14D: 48 98                 - cdqe 
start_protected_game.exe+25E14F: 48 03 D0              - add rdx,rax
start_protected_game.exe+25E152: 4C 89 54 24 18        - mov [rsp+18],r10
start_protected_game.exe+25E157: 48 89 54 24 20        - mov [rsp+20],rdx
start_protected_game.exe+25E15C: 4C 89 5C 24 08        - mov [rsp+08],r11
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"item"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : start_protected_game.exe
  Version: 
  Date   : 2024-06-22
  Author : ichir

  This script does blah blah blah
}

define(address,"start_protected_game.exe"+71257E)
define(bytes,89 51 08 C3 48 89 04 24)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"start_protected_game.exe"+71257E)

label(code)
label(return)

newmem:

code:
  mov edx,3e0
  mov [rcx+08],edx
  ret 
  mov [rsp],rax
  jmp return

address:
  jmp newmem
  nop 3
return:

[DISABLE]

address:
  db bytes
  // mov [rcx+08],edx
  // ret 
  // mov [rsp],rax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: start_protected_game.exe.text+71157E

start_protected_game.exe.text+71155C: 48 8D 05 A4 89 51 08        - lea rax,[7FF61011AF07]
start_protected_game.exe.text+711563: C3                          - ret 
start_protected_game.exe.text+711564: 48 8B 4D 1F                 - mov rcx,[rbp+1F]
start_protected_game.exe.text+711568: 48 33 CC                    - xor rcx,rsp
start_protected_game.exe.text+71156B: E9 F8 E9 94 01              - jmp start_protected_game.exe.text+205FF68
start_protected_game.exe.text+711570: 39 51 08                    - cmp [rcx+08],edx
start_protected_game.exe.text+711573: 72 05                       - jb start_protected_game.exe.text+71157A
start_protected_game.exe.text+711575: 45 84 C9                    - test r9b,r9b
start_protected_game.exe.text+711578: 74 04                       - je start_protected_game.exe.text+71157E
start_protected_game.exe.text+71157A: 44 89 41 0C                 - mov [rcx+0C],r8d
// ---------- INJECTING HERE ----------
start_protected_game.exe.text+71157E: 89 51 08                    - mov [rcx+08],edx
// ---------- DONE INJECTING  ----------
start_protected_game.exe.text+711581: C3                          - ret 
start_protected_game.exe.text+711582: 48 89 04 24                 - mov [rsp],rax
start_protected_game.exe.text+711586: 48 8B 5C 24 10              - mov rbx,[rsp+10]
start_protected_game.exe.text+71158B: E9 7E 30 D5 04              - jmp start_protected_game.exe.text+85760E
start_protected_game.exe.text+711590: 40 53                       - push rbx
start_protected_game.exe.text+711592: 48 83 EC 40                 - sub rsp,40
start_protected_game.exe.text+711596: 48 C7 44 24 20 FE FF FF FF  - mov qword ptr [rsp+20],FFFFFFFFFFFFFFFE
start_protected_game.exe.text+71159F: 48 8B D9                    - mov rbx,rcx
start_protected_game.exe.text+7115A2: 48 8B D1                    - mov rdx,rcx
start_protected_game.exe.text+7115A5: 48 8D 4C 24 28              - lea rcx,[rsp+28]
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
