<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>5</ID>
      <Description>"money desc"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2024-03-03
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_x64_rwdi.dll"+CD2F0F)
define(bytes,89 41 40 48 98)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+CD2F0F)

label(code)
label(return)

newmem:

code:
  add eax,fff
  mov [rcx+40],eax
  cdqe 
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // mov [rcx+40],eax
  // cdqe 

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_x64_rwdi.dll+CD2F0F

gamedll_x64_rwdi.dll+CD2EEE: 48 8B 5C 24 58  - mov rbx,[rsp+58]
gamedll_x64_rwdi.dll+CD2EF3: 48 8B 6C 24 60  - mov rbp,[rsp+60]
gamedll_x64_rwdi.dll+CD2EF8: 48 83 C4 40     - add rsp,40
gamedll_x64_rwdi.dll+CD2EFC: 5F              - pop rdi
gamedll_x64_rwdi.dll+CD2EFD: C3              - ret 
gamedll_x64_rwdi.dll+CD2EFE: 48 89 74 24 50  - mov [rsp+50],rsi
gamedll_x64_rwdi.dll+CD2F03: 48 8D 54 24 68  - lea rdx,[rsp+68]
gamedll_x64_rwdi.dll+CD2F08: 8B 71 40        - mov esi,[rcx+40]
gamedll_x64_rwdi.dll+CD2F0B: 8B C6           - mov eax,esi
gamedll_x64_rwdi.dll+CD2F0D: 2B C7           - sub eax,edi
// ---------- INJECTING HERE ----------
gamedll_x64_rwdi.dll+CD2F0F: 89 41 40        - mov [rcx+40],eax
// ---------- DONE INJECTING  ----------
gamedll_x64_rwdi.dll+CD2F12: 48 98           - cdqe 
gamedll_x64_rwdi.dll+CD2F14: 48 89 44 24 68  - mov [rsp+68],rax
gamedll_x64_rwdi.dll+CD2F19: E8 62 48 6E FF  - call gamedll_x64_rwdi.dll+3B7780
gamedll_x64_rwdi.dll+CD2F1E: 8B 43 08        - mov eax,[rbx+08]
gamedll_x64_rwdi.dll+CD2F21: 48 8D 54 24 20  - lea rdx,[rsp+20]
gamedll_x64_rwdi.dll+CD2F26: 89 44 24 2C     - mov [rsp+2C],eax
gamedll_x64_rwdi.dll+CD2F2A: 48 63 43 40     - movsxd  rax,dword ptr [rbx+40]
gamedll_x64_rwdi.dll+CD2F2E: 48 89 44 24 30  - mov [rsp+30],rax
gamedll_x64_rwdi.dll+CD2F33: 48 89 7C 24 20  - mov [rsp+20],rdi
gamedll_x64_rwdi.dll+CD2F38: 89 6C 24 28     - mov [rsp+28],ebp
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"skill"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2024-03-03
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_x64_rwdi.dll"+C3F33D)
define(bytes,89 42 08 40 84 ED)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+C3F33D)

label(code)
label(return)

newmem:

code:
  mov [rdx+08],eax
  add [rdx+08],fffff
  test bpl,bpl
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rdx+08],eax
  // test bpl,bpl

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_x64_rwdi.dll+C3F33D

gamedll_x64_rwdi.dll+C3F320: 8B C3                 - mov eax,ebx
gamedll_x64_rwdi.dll+C3F322: 41 8B DA              - mov ebx,r10d
gamedll_x64_rwdi.dll+C3F325: 2B 5A 0C              - sub ebx,[rdx+0C]
gamedll_x64_rwdi.dll+C3F328: 3B C3                 - cmp eax,ebx
gamedll_x64_rwdi.dll+C3F32A: 0F 46 D8              - cmovbe ebx,eax
gamedll_x64_rwdi.dll+C3F32D: B8 FF FF FF 7F        - mov eax,7FFFFFFF
gamedll_x64_rwdi.dll+C3F332: 3B D8                 - cmp ebx,eax
gamedll_x64_rwdi.dll+C3F334: 0F 47 D8              - cmova ebx,eax
gamedll_x64_rwdi.dll+C3F337: F7 DB                 - neg ebx
gamedll_x64_rwdi.dll+C3F339: 41 8D 04 1A           - lea eax,[r10+rbx]
// ---------- INJECTING HERE ----------
gamedll_x64_rwdi.dll+C3F33D: 89 42 08              - mov [rdx+08],eax
// ---------- DONE INJECTING  ----------
gamedll_x64_rwdi.dll+C3F340: 40 84 ED              - test bpl,bpl
gamedll_x64_rwdi.dll+C3F343: 74 39                 - je gamedll_x64_rwdi.dll+C3F37E
gamedll_x64_rwdi.dll+C3F345: 48 8B 0D BC 5F FD 00  - mov rcx,[gamedll_x64_rwdi.dll+1C15308]
gamedll_x64_rwdi.dll+C3F34C: 48 85 C9              - test rcx,rcx
gamedll_x64_rwdi.dll+C3F34F: 74 2D                 - je gamedll_x64_rwdi.dll+C3F37E
gamedll_x64_rwdi.dll+C3F351: 48 8B 89 80 02 00 00  - mov rcx,[rcx+00000280]
gamedll_x64_rwdi.dll+C3F358: 48 85 C9              - test rcx,rcx
gamedll_x64_rwdi.dll+C3F35B: 74 21                 - je gamedll_x64_rwdi.dll+C3F37E
gamedll_x64_rwdi.dll+C3F35D: 44 8B 0F              - mov r9d,[rdi]
gamedll_x64_rwdi.dll+C3F360: 41 83 F9 03           - cmp r9d,03
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"item"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2024-03-03
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_x64_rwdi.dll"+6F2E95)
define(bytes,89 1E 48 8B 5C 24 30)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+6F2E95)

label(code)
label(return)

newmem:

code:
  mov ebx,60
  mov [rsi],ebx
  mov rbx,[rsp+30]
  jmp return

address:
  jmp newmem
  nop 2
return:

[DISABLE]

address:
  db bytes
  // mov [rsi],ebx
  // mov rbx,[rsp+30]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_x64_rwdi.dll+6F2E95

gamedll_x64_rwdi.dll+6F2E7A: 79 14           - jns gamedll_x64_rwdi.dll+6F2E90
gamedll_x64_rwdi.dll+6F2E7C: 33 DB           - xor ebx,ebx
gamedll_x64_rwdi.dll+6F2E7E: 89 1E           - mov [rsi],ebx
gamedll_x64_rwdi.dll+6F2E80: 48 8B 5C 24 30  - mov rbx,[rsp+30]
gamedll_x64_rwdi.dll+6F2E85: 48 8B 74 24 38  - mov rsi,[rsp+38]
gamedll_x64_rwdi.dll+6F2E8A: 48 83 C4 20     - add rsp,20
gamedll_x64_rwdi.dll+6F2E8E: 5F              - pop rdi
gamedll_x64_rwdi.dll+6F2E8F: C3              - ret 
gamedll_x64_rwdi.dll+6F2E90: 3B D8           - cmp ebx,eax
gamedll_x64_rwdi.dll+6F2E92: 0F 4F D8        - cmovg ebx,eax
// ---------- INJECTING HERE ----------
gamedll_x64_rwdi.dll+6F2E95: 89 1E           - mov [rsi],ebx
// ---------- DONE INJECTING  ----------
gamedll_x64_rwdi.dll+6F2E97: 48 8B 5C 24 30  - mov rbx,[rsp+30]
gamedll_x64_rwdi.dll+6F2E9C: 48 8B 74 24 38  - mov rsi,[rsp+38]
gamedll_x64_rwdi.dll+6F2EA1: 48 83 C4 20     - add rsp,20
gamedll_x64_rwdi.dll+6F2EA5: 5F              - pop rdi
gamedll_x64_rwdi.dll+6F2EA6: C3              - ret 
gamedll_x64_rwdi.dll+6F2EA7: CC              - int 3 
gamedll_x64_rwdi.dll+6F2EA8: CC              - int 3 
gamedll_x64_rwdi.dll+6F2EA9: CC              - int 3 
gamedll_x64_rwdi.dll+6F2EAA: CC              - int 3 
gamedll_x64_rwdi.dll+6F2EAB: CC              - int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"weapon"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2024-03-03
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_x64_rwdi.dll"+6F34FD)
define(bytes,F3 0F 11 77 04)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+6F34FD)

label(code)
label(return)

newmem:

code:
  movss [rdi+04],xmm6
  mov [rdi+04],42C60000
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // movss [rdi+04],xmm6

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_x64_rwdi.dll+6F34FD

gamedll_x64_rwdi.dll+6F34D5: 76 19              - jna gamedll_x64_rwdi.dll+6F34F0
gamedll_x64_rwdi.dll+6F34D7: 48 8B 47 18        - mov rax,[rdi+18]
gamedll_x64_rwdi.dll+6F34DB: 48 8D 4F 18        - lea rcx,[rdi+18]
gamedll_x64_rwdi.dll+6F34DF: FF 90 28 0A 00 00  - call qword ptr [rax+00000A28]
gamedll_x64_rwdi.dll+6F34E5: F3 0F 5F F7        - maxss xmm6,xmm7
gamedll_x64_rwdi.dll+6F34E9: F3 0F 5D C6        - minss xmm0,xmm6
gamedll_x64_rwdi.dll+6F34ED: 0F 28 F0           - movaps xmm6,xmm0
gamedll_x64_rwdi.dll+6F34F0: 0F 28 7C 24 40     - movaps xmm7,[rsp+40]
gamedll_x64_rwdi.dll+6F34F5: 48 8B 47 18        - mov rax,[rdi+18]
gamedll_x64_rwdi.dll+6F34F9: 48 8D 4F 18        - lea rcx,[rdi+18]
// ---------- INJECTING HERE ----------
gamedll_x64_rwdi.dll+6F34FD: F3 0F 11 77 04     - movss [rdi+04],xmm6
// ---------- DONE INJECTING  ----------
gamedll_x64_rwdi.dll+6F3502: FF 90 78 0C 00 00  - call qword ptr [rax+00000C78]
gamedll_x64_rwdi.dll+6F3508: 48 8B 57 18        - mov rdx,[rdi+18]
gamedll_x64_rwdi.dll+6F350C: 48 8D 4F 18        - lea rcx,[rdi+18]
gamedll_x64_rwdi.dll+6F3510: 48 8B F0           - mov rsi,rax
gamedll_x64_rwdi.dll+6F3513: FF 92 70 0C 00 00  - call qword ptr [rdx+00000C70]
gamedll_x64_rwdi.dll+6F3519: 48 8B 57 18        - mov rdx,[rdi+18]
gamedll_x64_rwdi.dll+6F351D: 48 8D 4F 18        - lea rcx,[rdi+18]
gamedll_x64_rwdi.dll+6F3521: 48 8B E8           - mov rbp,rax
gamedll_x64_rwdi.dll+6F3524: FF 92 68 0C 00 00  - call qword ptr [rdx+00000C68]
gamedll_x64_rwdi.dll+6F352A: 48 8B 57 18        - mov rdx,[rdi+18]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"wire"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2024-03-03
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_x64_rwdi.dll"+D7B3E7)
define(bytes,F3 0F 11 47 40)

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
assert(address,bytes)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+D7B3E7)

label(code)
label(return)

newmem:

code:
  //movss [rdi+40],xmm0
  jmp return

address:
  jmp newmem
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
address:
  db bytes
  // movss [rdi+40],xmm0

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_x64_rwdi.dll+D7B3E7

gamedll_x64_rwdi.dll+D7B3BB: E8 00 F3 6F FF                 - call gamedll_x64_rwdi.dll+47A6C0
gamedll_x64_rwdi.dll+D7B3C0: 48 85 C0                       - test rax,rax
gamedll_x64_rwdi.dll+D7B3C3: 74 09                          - je gamedll_x64_rwdi.dll+D7B3CE
gamedll_x64_rwdi.dll+D7B3C5: 83 B8 30 02 00 00 02           - cmp dword ptr [rax+00000230],02
gamedll_x64_rwdi.dll+D7B3CC: 77 0D                          - ja gamedll_x64_rwdi.dll+D7B3DB
gamedll_x64_rwdi.dll+D7B3CE: E8 AD E0 6A FF                 - call gamedll_x64_rwdi.dll+429480
gamedll_x64_rwdi.dll+D7B3D3: F3 0F 59 B8 74 02 00 00        - mulss xmm7,[rax+00000274]
gamedll_x64_rwdi.dll+D7B3DB: F3 0F 10 47 40                 - movss xmm0,[rdi+40]
gamedll_x64_rwdi.dll+D7B3E0: F3 0F 5C C7                    - subss xmm0,xmm7
gamedll_x64_rwdi.dll+D7B3E4: 0F 2F C6                       - comiss xmm0,xmm6
// ---------- INJECTING HERE ----------
gamedll_x64_rwdi.dll+D7B3E7: F3 0F 11 47 40                 - movss [rdi+40],xmm0
// ---------- DONE INJECTING  ----------
gamedll_x64_rwdi.dll+D7B3EC: 0F 87 50 02 00 00              - ja gamedll_x64_rwdi.dll+D7B642
gamedll_x64_rwdi.dll+D7B3F2: C6 47 44 01                    - mov byte ptr [rdi+44],01
gamedll_x64_rwdi.dll+D7B3F6: C7 47 40 00 00 00 00           - mov [rdi+40],00000000
gamedll_x64_rwdi.dll+D7B3FD: E9 40 02 00 00                 - jmp gamedll_x64_rwdi.dll+D7B642
gamedll_x64_rwdi.dll+D7B402: 83 FE 06                       - cmp esi,06
gamedll_x64_rwdi.dll+D7B405: 74 42                          - je gamedll_x64_rwdi.dll+D7B449
gamedll_x64_rwdi.dll+D7B407: C7 87 50 02 00 00 00 00 00 00  - mov [rdi+00000250],00000000
gamedll_x64_rwdi.dll+D7B411: 0F 2E B7 98 01 00 00           - ucomiss xmm6,[rdi+00000198]
gamedll_x64_rwdi.dll+D7B418: 75 12                          - jne gamedll_x64_rwdi.dll+D7B42C
gamedll_x64_rwdi.dll+D7B41A: 0F 2E B7 9C 01 00 00           - ucomiss xmm6,[rdi+0000019C]
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
