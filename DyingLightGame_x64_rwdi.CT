<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>15</ID>
      <Description>"exp"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 
  Date   : 2024-03-05
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_ph_x64_rwdi.dll"+1342C26)
define(bytes,48 89 41 18 E8 B1 11 05 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_ph_x64_rwdi.dll"+1342C26)

label(code)
label(return)

newmem:

code:
  add rax,fffff
  mov [rcx+18],rax
  call gamedll_ph_x64_rwdi.dll+1393DE0
  jmp return

address:
  jmp newmem
  nop 4
return:

[DISABLE]

address:
  db bytes
  // mov [rcx+18],rax
  // call gamedll_ph_x64_rwdi.dll+1393DE0

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll+1342C26

gamedll_ph_x64_rwdi.dll+1342BFF: 4C 89 AC 24 A0 00 00 00        - mov [rsp+000000A0],r13
gamedll_ph_x64_rwdi.dll+1342C07: 4C 89 74 24 60                 - mov [rsp+60],r14
gamedll_ph_x64_rwdi.dll+1342C0C: 4C 3B F8                       - cmp r15,rax
gamedll_ph_x64_rwdi.dll+1342C0F: 77 06                          - ja gamedll_ph_x64_rwdi.dll+1342C17
gamedll_ph_x64_rwdi.dll+1342C11: 49 8D 04 17                    - lea rax,[r15+rdx]
gamedll_ph_x64_rwdi.dll+1342C15: EB 0D                          - jmp gamedll_ph_x64_rwdi.dll+1342C24
gamedll_ph_x64_rwdi.dll+1342C17: 49 8B EF                       - mov rbp,r15
gamedll_ph_x64_rwdi.dll+1342C1A: 48 C7 C0 FF FF FF FF           - mov rax,FFFFFFFFFFFFFFFF
gamedll_ph_x64_rwdi.dll+1342C21: 48 F7 D5                       - not rbp
gamedll_ph_x64_rwdi.dll+1342C24: 33 D2                          - xor edx,edx
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+1342C26: 48 89 41 18                    - mov [rcx+18],rax
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+1342C2A: E8 B1 11 05 00                 - call gamedll_ph_x64_rwdi.dll+1393DE0
gamedll_ph_x64_rwdi.dll+1342C2F: 4C 8D 25 02 10 4C 01           - lea r12,[gamedll_ph_x64_rwdi.dll+2803C38]
gamedll_ph_x64_rwdi.dll+1342C36: 8B F0                          - mov esi,eax
gamedll_ph_x64_rwdi.dll+1342C38: 41 BD F8 FF FF FF              - mov r13d,FFFFFFF8
gamedll_ph_x64_rwdi.dll+1342C3E: 49 BE FF FF FF FF FF FF FF 1F  - mov r14,1FFFFFFFFFFFFFFF
gamedll_ph_x64_rwdi.dll+1342C48: 3B 47 0C                       - cmp eax,[rdi+0C]
gamedll_ph_x64_rwdi.dll+1342C4B: 0F 84 8D 00 00 00              - je gamedll_ph_x64_rwdi.dll+1342CDE
gamedll_ph_x64_rwdi.dll+1342C51: 8B D0                          - mov edx,eax
gamedll_ph_x64_rwdi.dll+1342C53: 48 8B CF                       - mov rcx,rdi
gamedll_ph_x64_rwdi.dll+1342C56: E8 75 23 06 00                 - call gamedll_ph_x64_rwdi.dll+13A4FD0
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"skip stamina"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 
  Date   : 2024-03-04
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_ph_x64_rwdi.dll"+BD8411)
define(bytes,F3 0F 11 47 10)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_ph_x64_rwdi.dll"+BD8411)

label(code)
label(return)

newmem:

code:
  //movss [rdi+10],xmm0
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // movss [rdi+10],xmm0

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll+BD8411

gamedll_ph_x64_rwdi.dll+BD83E5: E9 30 01 00 00        - jmp gamedll_ph_x64_rwdi.dll+BD851A
gamedll_ph_x64_rwdi.dll+BD83EA: F3 0F 10 77 10        - movss xmm6,[rdi+10]
gamedll_ph_x64_rwdi.dll+BD83EF: 48 8B CF              - mov rcx,rdi
gamedll_ph_x64_rwdi.dll+BD83F2: F3 0F 5C F7           - subss xmm6,xmm7
gamedll_ph_x64_rwdi.dll+BD83F6: E8 75 E4 03 00        - call gamedll_ph_x64_rwdi.dll+C16870
gamedll_ph_x64_rwdi.dll+BD83FB: 0F 28 D0              - movaps xmm2,xmm0
gamedll_ph_x64_rwdi.dll+BD83FE: 41 0F 28 C9           - movaps xmm1,xmm9
gamedll_ph_x64_rwdi.dll+BD8402: 0F 28 C6              - movaps xmm0,xmm6
gamedll_ph_x64_rwdi.dll+BD8405: E8 96 2B CE 00        - call gamedll_ph_x64_rwdi.dll+18BAFA0
gamedll_ph_x64_rwdi.dll+BD840A: 0F 2F 05 BB 1A 87 01  - comiss xmm0,[gamedll_ph_x64_rwdi.dll+2449ECC]
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+BD8411: F3 0F 11 47 10        - movss [rdi+10],xmm0
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+BD8416: 73 4F                 - jae gamedll_ph_x64_rwdi.dll+BD8467
gamedll_ph_x64_rwdi.dll+BD8418: 48 8B 4F 08           - mov rcx,[rdi+08]
gamedll_ph_x64_rwdi.dll+BD841C: C7 47 10 00 00 00 00  - mov [rdi+10],00000000
gamedll_ph_x64_rwdi.dll+BD8423: 80 B9 70 2D 00 00 00  - cmp byte ptr [rcx+00002D70],00
gamedll_ph_x64_rwdi.dll+BD842A: 74 3B                 - je gamedll_ph_x64_rwdi.dll+BD8467
gamedll_ph_x64_rwdi.dll+BD842C: E8 8F 13 F7 FF        - call gamedll_ph_x64_rwdi.dll+B497C0
gamedll_ph_x64_rwdi.dll+BD8431: 48 8B C8              - mov rcx,rax
gamedll_ph_x64_rwdi.dll+BD8434: 48 8B 10              - mov rdx,[rax]
gamedll_ph_x64_rwdi.dll+BD8437: FF 92 90 03 00 00     - call qword ptr [rdx+00000390]
gamedll_ph_x64_rwdi.dll+BD843D: 84 C0                 - test al,al
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"weapon"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 
  Date   : 2024-03-09
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_ph_x64_rwdi.dll"+11C4B93)
define(bytes,F3 0F 11 B7 A8 00 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_ph_x64_rwdi.dll"+11C4B93)

label(code)
label(return)

newmem:

code:
  //movss [rdi+000000A8],xmm6
  mov [rdi+000000A8],4479c000
  jmp return

address:
  jmp newmem
  nop 3
return:

[DISABLE]

address:
  db bytes
  // movss [rdi+000000A8],xmm6

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll+11C4B93

gamedll_ph_x64_rwdi.dll+11C4B6F: 48 8B CF                 - mov rcx,rdi
gamedll_ph_x64_rwdi.dll+11C4B72: FF 90 D0 0C 00 00        - call qword ptr [rax+00000CD0]
gamedll_ph_x64_rwdi.dll+11C4B78: 0F 2F F7                 - comiss xmm6,xmm7
gamedll_ph_x64_rwdi.dll+11C4B7B: 73 05                    - jae gamedll_ph_x64_rwdi.dll+11C4B82
gamedll_ph_x64_rwdi.dll+11C4B7D: 0F 57 F6                 - xorps xmm6,xmm6
gamedll_ph_x64_rwdi.dll+11C4B80: EB 07                    - jmp gamedll_ph_x64_rwdi.dll+11C4B89
gamedll_ph_x64_rwdi.dll+11C4B82: F3 0F 5D C6              - minss xmm0,xmm6
gamedll_ph_x64_rwdi.dll+11C4B86: 0F 28 F0                 - movaps xmm6,xmm0
gamedll_ph_x64_rwdi.dll+11C4B89: 0F 28 7C 24 20           - movaps xmm7,[rsp+20]
gamedll_ph_x64_rwdi.dll+11C4B8E: 48 83 7F 08 00           - cmp qword ptr [rdi+08],00
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+11C4B93: F3 0F 11 B7 A8 00 00 00  - movss [rdi+000000A8],xmm6
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+11C4B9B: 74 4F                    - je gamedll_ph_x64_rwdi.dll+11C4BEC
gamedll_ph_x64_rwdi.dll+11C4B9D: 48 8B 07                 - mov rax,[rdi]
gamedll_ph_x64_rwdi.dll+11C4BA0: 48 8B CF                 - mov rcx,rdi
gamedll_ph_x64_rwdi.dll+11C4BA3: 48 89 5C 24 50           - mov [rsp+50],rbx
gamedll_ph_x64_rwdi.dll+11C4BA8: FF 90 10 07 00 00        - call qword ptr [rax+00000710]
gamedll_ph_x64_rwdi.dll+11C4BAE: 48 8B 17                 - mov rdx,[rdi]
gamedll_ph_x64_rwdi.dll+11C4BB1: 48 8B CF                 - mov rcx,rdi
gamedll_ph_x64_rwdi.dll+11C4BB4: 8B D8                    - mov ebx,eax
gamedll_ph_x64_rwdi.dll+11C4BB6: FF 92 48 02 00 00        - call qword ptr [rdx+00000248]
gamedll_ph_x64_rwdi.dll+11C4BBC: 0F 28 DE                 - movaps xmm3,xmm6
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"gun ammo"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 
  Date   : 2024-03-09
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_ph_x64_rwdi.dll"+6623E5)
define(bytes,89 03 48 8D 4B 30)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_ph_x64_rwdi.dll"+6623E5)

label(code)
label(return)

newmem:

code:
  //mov [rbx],eax
  lea rcx,[rbx+30]
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rbx],eax
  // lea rcx,[rbx+30]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll+6623E5

gamedll_ph_x64_rwdi.dll+6623C0: FF 90 20 0E 00 00        - call qword ptr [rax+00000E20]
gamedll_ph_x64_rwdi.dll+6623C6: 48 85 C0                 - test rax,rax
gamedll_ph_x64_rwdi.dll+6623C9: 74 7B                    - je gamedll_ph_x64_rwdi.dll+662446
gamedll_ph_x64_rwdi.dll+6623CB: 48 8B 43 30              - mov rax,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623CF: 48 8D 4B 30              - lea rcx,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623D3: FF 90 A8 03 00 00        - call qword ptr [rax+000003A8]
gamedll_ph_x64_rwdi.dll+6623D9: 33 D2                    - xor edx,edx
gamedll_ph_x64_rwdi.dll+6623DB: 8B CE                    - mov ecx,esi
gamedll_ph_x64_rwdi.dll+6623DD: 44 8B C0                 - mov r8d,eax
gamedll_ph_x64_rwdi.dll+6623E0: E8 7B 8B 25 01           - call gamedll_ph_x64_rwdi.dll+18BAF60
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+6623E5: 89 03                    - mov [rbx],eax
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+6623E7: 48 8D 4B 30              - lea rcx,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623EB: 48 8B 43 30              - mov rax,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623EF: FF 90 68 02 00 00        - call qword ptr [rax+00000268]
gamedll_ph_x64_rwdi.dll+6623F5: 83 C0 E9                 - add eax,-17
gamedll_ph_x64_rwdi.dll+6623F8: 83 F8 13                 - cmp eax,13
gamedll_ph_x64_rwdi.dll+6623FB: 77 4B                    - ja gamedll_ph_x64_rwdi.dll+662448
gamedll_ph_x64_rwdi.dll+6623FD: 48 8D 0D FC DB 99 FF     - lea rcx,[gamedll_ph_x64_rwdi.dll]
gamedll_ph_x64_rwdi.dll+662404: 48 98                    - cdqe 
gamedll_ph_x64_rwdi.dll+662406: 0F B6 84 01 68 24 66 00  - movzx eax,byte ptr [rcx+rax+00662468]
gamedll_ph_x64_rwdi.dll+66240E: 8B 94 81 60 24 66 00     - mov edx,[rcx+rax*4+00662460]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"bowgun"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 
  Date   : 2024-03-10
  Author : ichir

  This script does blah blah blah
}

define(address,"gamedll_ph_x64_rwdi.dll"+6623E5)
define(bytes,89 03 48 8D 4B 30)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"gamedll_ph_x64_rwdi.dll"+6623E5)

label(code)
label(return)

newmem:

code:
  mov [rbx],4
  lea rcx,[rbx+30]
  jmp return

address:
  jmp newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rbx],eax
  // lea rcx,[rbx+30]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll+6623E5

gamedll_ph_x64_rwdi.dll+6623C0: FF 90 20 0E 00 00        - call qword ptr [rax+00000E20]
gamedll_ph_x64_rwdi.dll+6623C6: 48 85 C0                 - test rax,rax
gamedll_ph_x64_rwdi.dll+6623C9: 74 7B                    - je gamedll_ph_x64_rwdi.dll+662446
gamedll_ph_x64_rwdi.dll+6623CB: 48 8B 43 30              - mov rax,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623CF: 48 8D 4B 30              - lea rcx,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623D3: FF 90 A8 03 00 00        - call qword ptr [rax+000003A8]
gamedll_ph_x64_rwdi.dll+6623D9: 33 D2                    - xor edx,edx
gamedll_ph_x64_rwdi.dll+6623DB: 8B CE                    - mov ecx,esi
gamedll_ph_x64_rwdi.dll+6623DD: 44 8B C0                 - mov r8d,eax
gamedll_ph_x64_rwdi.dll+6623E0: E8 7B 8B 25 01           - call gamedll_ph_x64_rwdi.dll+18BAF60
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+6623E5: 89 03                    - mov [rbx],eax
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+6623E7: 48 8D 4B 30              - lea rcx,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623EB: 48 8B 43 30              - mov rax,[rbx+30]
gamedll_ph_x64_rwdi.dll+6623EF: FF 90 68 02 00 00        - call qword ptr [rax+00000268]
gamedll_ph_x64_rwdi.dll+6623F5: 83 C0 E9                 - add eax,-17
gamedll_ph_x64_rwdi.dll+6623F8: 83 F8 13                 - cmp eax,13
gamedll_ph_x64_rwdi.dll+6623FB: 77 4B                    - ja gamedll_ph_x64_rwdi.dll+662448
gamedll_ph_x64_rwdi.dll+6623FD: 48 8D 0D FC DB 99 FF     - lea rcx,[gamedll_ph_x64_rwdi.dll]
gamedll_ph_x64_rwdi.dll+662404: 48 98                    - cdqe 
gamedll_ph_x64_rwdi.dll+662406: 0F B6 84 01 68 24 66 00  - movzx eax,byte ptr [rcx+rax+00662468]
gamedll_ph_x64_rwdi.dll+66240E: 8B 94 81 60 24 66 00     - mov edx,[rcx+rax*4+00662460]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1318</ID>
      <Description>"from_other_site"</Description>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1317</ID>
          <Description>"[1.14] Free crafting (best toggle when needed - swap page if values do not show as 0)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 1.14
  Date   : 2023-08-24
  Author : ins

  This script does blah blah blah
  r12 = itemDescCraftPlan
  r14 = ItemDescInventory
}

[ENABLE]

aobscanmodule(CRAFTING,gamedll_ph_x64_rwdi.dll,42 8B 04 A9 85 C0) // should be unique
alloc(newmem,$1000,CRAFTING)

label(code)
label(return)

// code is read when swapping gui and also when mousing over something to craft.
newmem:
  pushfq
  cmp r8,(int)8
  jne code
  cmp rsi,(int)0
  jne code
  cmp r13,r15
  jne code
  mov [rcx+r13*4], (int)0

code:
  popfq
  mov eax,[rcx+r13*4]
  test eax,eax
  jmp return

CRAFTING:
  jmp newmem
  nop
return:
registersymbol(CRAFTING)

[DISABLE]

CRAFTING:
  db 42 8B 04 A9 85 C0

unregistersymbol(CRAFTING)
dealloc(newmem)

{

// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll+67EF86

gamedll_ph_x64_rwdi.dll+67EF5D: 8B D8                          - mov ebx,eax
gamedll_ph_x64_rwdi.dll+67EF5F: 85 C0                          - test eax,eax
gamedll_ph_x64_rwdi.dll+67EF61: 49 8B 04 24                    - mov rax,[r12]
gamedll_ph_x64_rwdi.dll+67EF65: BE 00 00 00 00                 - mov esi,00000000
gamedll_ph_x64_rwdi.dll+67EF6A: 49 8B CC                       - mov rcx,r12
gamedll_ph_x64_rwdi.dll+67EF6D: 0F 48 DE                       - cmovs ebx,esi
gamedll_ph_x64_rwdi.dll+67EF70: FF 90 D0 0D 00 00              - call qword ptr [rax+00000DD0]
gamedll_ph_x64_rwdi.dll+67EF76: 48 BF FF FF FF FF FF FF 00 00  - mov rdi,0000FFFFFFFFFFFF
gamedll_ph_x64_rwdi.dll+67EF80: 48 8B 08                       - mov rcx,[rax]
gamedll_ph_x64_rwdi.dll+67EF83: 48 23 CF                       - and rcx,rdi
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+67EF86: 42 8B 04 A9                    - mov eax,[rcx+r13*4]
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+67EF8A: 85 C0                          - test eax,eax
gamedll_ph_x64_rwdi.dll+67EF8C: 7E 45                          - jle gamedll_ph_x64_rwdi.dll+67EFD3
gamedll_ph_x64_rwdi.dll+67EF8E: 66 0F 6E CB                    - movd xmm1,ebx
gamedll_ph_x64_rwdi.dll+67EF92: 66 0F 6E C0                    - movd xmm0,eax
gamedll_ph_x64_rwdi.dll+67EF96: 0F 5B C9                       - cvtdq2ps xmm1,xmm1
gamedll_ph_x64_rwdi.dll+67EF99: 0F 5B C0                       - cvtdq2ps xmm0,xmm0
gamedll_ph_x64_rwdi.dll+67EF9C: F3 0F 5E C8                    - divss xmm1,xmm0
gamedll_ph_x64_rwdi.dll+67EFA0: F3 0F 2C C9                    - cvttss2si ecx,xmm1
gamedll_ph_x64_rwdi.dll+67EFA4: 81 F9 00 00 00 80              - cmp ecx,80000000
gamedll_ph_x64_rwdi.dll+67EFAA: 74 1E                          - je gamedll_ph_x64_rwdi.dll+67EFCA



}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1315</ID>
          <Description>"[1.14] Unlimited consumables [freezes each one you use at 15]"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 
  Date   : 2023-12-30
  Author : ins

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(CONSUME,gamedll_ph_x64_rwdi.dll,8B 29 8B F2 48 8B D9) // should be unique
alloc(newmem,$1000,CONSUME)

label(code)
label(cheat)
label(return)

// rdx = count
newmem:
  pushfq
  cmp rax,1
  je code

  cmp rax,0
  je code

//  cmp r13,0
//  jne code

  cmp r9,0
  jne code

  cmp r8,6
  jne code
//  cmp r10,1300
//  je cheat
// rbx, 9,c,
// rbx 1f = bow?
cheat:
  mov edx,(int)15

code:
  popfq
  mov ebp,[rcx]
  mov esi,edx
  mov rbx,rcx
  jmp return

CONSUME:
  jmp newmem
  nop 2
return:
registersymbol(CONSUME)

[DISABLE]

CONSUME:
  db 8B 29 8B F2 48 8B D9

unregistersymbol(CONSUME)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: gamedll_ph_x64_rwdi.dll.text+5C9D64

gamedll_ph_x64_rwdi.dll.text+5C9D4B: CC                 - int 3 
gamedll_ph_x64_rwdi.dll.text+5C9D4C: CC                 - int 3 
gamedll_ph_x64_rwdi.dll.text+5C9D4D: CC                 - int 3 
gamedll_ph_x64_rwdi.dll.text+5C9D4E: CC                 - int 3 
gamedll_ph_x64_rwdi.dll.text+5C9D4F: CC                 - int 3 
gamedll_ph_x64_rwdi.dll.text+5C9D50: 48 89 5C 24 08     - mov [rsp+08],rbx
gamedll_ph_x64_rwdi.dll.text+5C9D55: 48 89 6C 24 10     - mov [rsp+10],rbp
gamedll_ph_x64_rwdi.dll.text+5C9D5A: 48 89 74 24 18     - mov [rsp+18],rsi
gamedll_ph_x64_rwdi.dll.text+5C9D5F: 57                 - push rdi
gamedll_ph_x64_rwdi.dll.text+5C9D60: 48 83 EC 20        - sub rsp,20
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll.text+5C9D64: 8B 29              - mov ebp,[rcx]
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll.text+5C9D66: 8B F2              - mov esi,edx
gamedll_ph_x64_rwdi.dll.text+5C9D68: 48 8B D9           - mov rbx,rcx
gamedll_ph_x64_rwdi.dll.text+5C9D6B: E8 A0 51 FA FF     - call gamedll_ph_x64_rwdi.dll.text+56EF10
gamedll_ph_x64_rwdi.dll.text+5C9D70: 84 C0              - test al,al
gamedll_ph_x64_rwdi.dll.text+5C9D72: 0F 84 8E 00 00 00  - je gamedll_ph_x64_rwdi.dll.text+5C9E06
gamedll_ph_x64_rwdi.dll.text+5C9D78: 48 8B 43 30        - mov rax,[rbx+30]
gamedll_ph_x64_rwdi.dll.text+5C9D7C: 48 8D 4B 30        - lea rcx,[rbx+30]
gamedll_ph_x64_rwdi.dll.text+5C9D80: FF 90 E0 0D 00 00  - call qword ptr [rax+00000DE0]
gamedll_ph_x64_rwdi.dll.text+5C9D86: 48 85 C0           - test rax,rax
gamedll_ph_x64_rwdi.dll.text+5C9D89: 74 7B              - je gamedll_ph_x64_rwdi.dll.text+5C9E06
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1316</ID>
          <Description>"[Cheat][1.14] Unlimited Special Arrows (infinite below is only normal ones)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 1.11.4
  Date   : 2023-08-24
  Author : ins

  Unlimited (special) Arrows.
}

[ENABLE]
aobscanmodule(ARROWS,gamedll_ph_x64_rwdi.dll,2B DF 49 8D 4A 10) // should be unique

ARROWS:
  nop
  nop

[DISABLE]

ARROWS:
db 2B DF

{
gamedll_ph_x64_rwdi.dll+8E0427: E8 A4 C3 07 00  - call gamedll_ph_x64_rwdi.dll+95C7D0
gamedll_ph_x64_rwdi.dll+8E042C: 48 8B 54 24 58  - mov rdx,[rsp+58]
gamedll_ph_x64_rwdi.dll+8E0431: 45 8B C7        - mov r8d,r15d
gamedll_ph_x64_rwdi.dll+8E0434: 48 8B CE        - mov rcx,rsi
gamedll_ph_x64_rwdi.dll+8E0437: E8 D4 BC 00 00  - call gamedll_ph_x64_rwdi.dll+8EC110
gamedll_ph_x64_rwdi.dll+8E043C: 48 8D 4C 24 58  - lea rcx,[rsp+58]
gamedll_ph_x64_rwdi.dll+8E0441: 8B EB           - mov ebp,ebx
gamedll_ph_x64_rwdi.dll+8E0443: E8 38 91 BD FF  - call gamedll_ph_x64_rwdi.dll+4B9580
gamedll_ph_x64_rwdi.dll+8E0448: 8B C3           - mov eax,ebx
gamedll_ph_x64_rwdi.dll+8E044A: EB 87           - jmp gamedll_ph_x64_rwdi.dll+8E03D3
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+8E044C: 2B DF           - sub ebx,edi
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+8E044E: 49 8D 4A 10     - lea rcx,[r10+10]
gamedll_ph_x64_rwdi.dll+8E0452: 8B D3           - mov edx,ebx
gamedll_ph_x64_rwdi.dll+8E0454: E8 47 01 C4 FF  - call gamedll_ph_x64_rwdi.dll+5205A0
gamedll_ph_x64_rwdi.dll+8E0459: 48 8B 54 24 58  - mov rdx,[rsp+58]
gamedll_ph_x64_rwdi.dll+8E045E: 45 8B C7        - mov r8d,r15d
gamedll_ph_x64_rwdi.dll+8E0461: 48 8B CE        - mov rcx,rsi
gamedll_ph_x64_rwdi.dll+8E0464: E8 37 BD 00 00  - call gamedll_ph_x64_rwdi.dll+8EC1A0
gamedll_ph_x64_rwdi.dll+8E0469: 8B EF           - mov ebp,edi
gamedll_ph_x64_rwdi.dll+8E046B: 8B C5           - mov eax,ebp
gamedll_ph_x64_rwdi.dll+8E046D: E9 61 FF FF FF  - jmp gamedll_ph_x64_rwdi.dll+8E03D3

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"[Cheat][1.14] Unlimited Accessories (Toggle when needed) (Bound: MouseButton4)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame_x64_rwdi.exe
  Version: 1.11.4.0
  Date   : 2023-08-24
  Author : ins

  Unlimited Consumables (Probably)
  Disable it when not needed cause it will bug with some quests and when you drop stuff.

}

[ENABLE]
aobscanmodule(INJECT,gamedll_ph_x64_rwdi.dll,48 83 C1 10 8B 11)
alloc(newmem,$1000,INJECT)

label(code)
label(cheat)
label(return)

newmem:
  pushfq
  cmp r8,(int)3
  jne code
  cmp rbp,(int)3
  jne code
  cmp r9,(int)0
  jne code
//  cmp r10,(int)0  This one is 0, 1, diff values.
//  jne code
  cmp rbx,(int)5 // throwing knives
  je cheat
  cmp rbx,(int)2 // uv lights
  je cheat
  cmp rbx,D // eggs
  je cheat
  cmp rbx,(int)3 // grenades
  je cheat
  cmp rbx,A // C4
  je cheat
  cmp rbx,4 // mine
  je cheat
  cmp rbx,6 // molotov
  je cheat
  cmp rbx,1 // infected blade
  je cheat
  cmp rbx,0 // bait
  je cheat
  cmp rbx,9 // decoy
  je cheat
  cmp rbx,C // egg-splosive
  je cheat
  cmp rbx,B // confetti grenade
  je cheat
  cmp rbx,8 // electric mine
  je cheat
  jmp code

cheat:
  mov [rcx+10],(int)60

code:
  popfq
  add rcx,10
  mov edx,[rcx]
  jmp return

INJECT:
  jmp newmem
  nop

return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 48 83 C1 10 8B 11

unregistersymbol(INJECT)
dealloc(newmem)

{
1.10
gamedll_ph_x64_rwdi.dll+8DE90F: 74 04           - je gamedll_ph_x64_rwdi.dll+8DE915
gamedll_ph_x64_rwdi.dll+8DE911: FF C3           - inc ebx
gamedll_ph_x64_rwdi.dll+8DE913: EB CB           - jmp gamedll_ph_x64_rwdi.dll+8DE8E0
gamedll_ph_x64_rwdi.dll+8DE915: 48 83 C1 10     - add rcx,10
gamedll_ph_x64_rwdi.dll+8DE919: E8 62 7E C0 FF  - call gamedll_ph_x64_rwdi.dll+4E6780
gamedll_ph_x64_rwdi.dll+8DE91E: 84 C0           - test al,al
gamedll_ph_x64_rwdi.dll+8DE920: 74 37           - je gamedll_ph_x64_rwdi.dll+8DE959
gamedll_ph_x64_rwdi.dll+8DE922: 48 8B 46 38     - mov rax,[rsi+38]
gamedll_ph_x64_rwdi.dll+8DE926: 49 23 C7        - and rax,r15
gamedll_ph_x64_rwdi.dll+8DE929: 48 8B 0C 38     - mov rcx,[rax+rdi]
// ---------- INJECTING HERE ----------
gamedll_ph_x64_rwdi.dll+8DE92D: 48 83 C1 10     - add rcx,10
// ---------- DONE INJECTING  ----------
gamedll_ph_x64_rwdi.dll+8DE931: 8B 11           - mov edx,[rcx]
gamedll_ph_x64_rwdi.dll+8DE933: 83 FA 01        - cmp edx,01
gamedll_ph_x64_rwdi.dll+8DE936: 7E 21           - jle gamedll_ph_x64_rwdi.dll+8DE959
gamedll_ph_x64_rwdi.dll+8DE938: FF CA           - dec edx
gamedll_ph_x64_rwdi.dll+8DE93A: E8 21 11 C4 FF  - call gamedll_ph_x64_rwdi.dll+51FA60
gamedll_ph_x64_rwdi.dll+8DE93F: 48 8B 56 38     - mov rdx,[rsi+38]
gamedll_ph_x64_rwdi.dll+8DE943: 44 8B C5        - mov r8d,ebp
gamedll_ph_x64_rwdi.dll+8DE946: 49 23 D7        - and rdx,r15
gamedll_ph_x64_rwdi.dll+8DE949: 48 8B CE        - mov rcx,rsi
gamedll_ph_x64_rwdi.dll+8DE94C: 48 8B 14 3A     - mov rdx,[rdx+rdi]
}
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>5</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+55ABBD</Address>
      <Comment>Put cost into rsp+50 from r15. 
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+5EB2AE</Address>
      <Comment>compare cost with count
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+650C12</Address>
      <Comment>reads currency
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+6611AA</Address>
      <Comment>r12 = playerdi_ph, r13=HumanAI
r8+24 = goal, r8+28 = current
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+67FCA0</Address>
      <Comment>rcx = cable object
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+8D4BC8</Address>
      <Comment>something interesting here maybe
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9216C5</Address>
      <Comment>something interesgin gmaybe
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+92ED7B</Address>
      <Comment>rbx last value before decrease arrow ammo
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+92EE79</Address>
      <Comment>Read ammo count into edx
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+92EE85</Address>
      <Comment>Decrease ammo count?
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+980192</Address>
      <Comment>cost is r14d, eax is how much currency I have
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0B68</Address>
      <Comment>Player position
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0B7A</Address>
      <Comment>Player Position
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0B85</Address>
      <Comment>Player Position
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0BC5</Address>
      <Comment>cable length used into cable object
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+BEEE5F</Address>
      <Comment>Read all skills
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+D01238</Address>
      <Comment>copy cost from r14d to esi
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+E1E647</Address>
      <Comment>Challenge Timer modified
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+E916B3</Address>
      <Comment>crafting cost
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+EC5670</Address>
      <Comment>Read weapon durability nonstop + random
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+11719CD</Address>
      <Comment>nonstop read cable length
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+11719E0</Address>
      <Comment>Max Length of Cable
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1171A61</Address>
      <Comment>Cable Length Left, xmm0 = length used
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1173AEC</Address>
      <Comment>rdi - bufftimeInstance struct
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+117C47B</Address>
      <Comment>GuiPlayerLevelTooltip for number of upgrade points
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+141F262</Address>
      <Comment>Maybe something
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1442F86</Address>
      <Comment>Consumable display
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+14D01B1</Address>
      <Comment>Cost is inserted into r15. 
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+14D02CD</Address>
      <Comment>Jump into code that reads inventory value on cost tooltip
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1694FAF</Address>
      <Comment>playervalues
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+16B81CE</Address>
      <Comment>Containes Equipped Values?
R10 = 1 on melee item
RBP = 00 or 01
RAX = 00 on throwable (dagger, flare)
R11 = 2000000000000000  - on dagger flare
RDX = 00 on melee
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+16B81D2</Address>
      <Comment>Compare value with ??
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+16C6381</Address>
      <Comment>compare safe values with..
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17A18B0</Address>
      <Comment>If stamina is 174, this value is 1.74. 
Then gets multiplied
rbx = cguiplayerdata 2
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17AC9B4</Address>
      <Comment>compare bounty goal
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17B5930</Address>
      <Comment>%s - moves DayNightCycle to Rax
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17B5937</Address>
      <Comment>moves cguiworlddata location to rsi
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17B594B</Address>
      <Comment>rax = daynightCycle
+10 value = 0.39
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17ED1A1</Address>
      <Comment>r14+38=FactionXP, +8=level, rcx=level
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+190803F</Address>
      <Comment>Crafting Subroutine
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+19EAC5B</Address>
      <Comment>inventory code
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+B8F1194</Address>
      <Comment>rbx, rdx - new value for ammo
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
