<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"stamina"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DD2.exe
  Version: 
  Date   : 2024-03-24
  Author : ichir

  This script does blah blah blah
}

define(address,"DD2.exe"+A50AC8)
define(bytes,F3 0F 11 57 20 75 0C 0F 2F D7 73 07 C7 47 20 00 00 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$10)

label(code)
label(return)

newmem:

code:
  movss [rdi+20],xmm2
  mov [rdi+20],447A0000
  jne DD2.exe+A50ADB
  comiss xmm2,xmm7
  jae DD2.exe+A50ADB
  mov [rdi+20],00000000
  jmp return

address:
  jmp far newmem
  nop 5
return:

[DISABLE]

address:
  db bytes
  // movss [rdi+20],xmm2
  // jne DD2.exe+A50ADB
  // comiss xmm2,xmm7
  // jae DD2.exe+A50ADB
  // mov [rdi+20],00000000

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: DD2.exe+A50AC8

DD2.exe+A50AA3: F3 0F 10 57 28        - movss xmm2,[rdi+28]
DD2.exe+A50AA8: 0F 5A C9              - cvtps2pd xmm1,xmm1
DD2.exe+A50AAB: F3 0F 5A C6           - cvtss2sd xmm0,xmm6
DD2.exe+A50AAF: F2 0F 58 C8           - addsd xmm1,xmm0
DD2.exe+A50AB3: 66 0F 5A D9           - cvtpd2ps xmm3,xmm1
DD2.exe+A50AB7: 0F 2F D3              - comiss xmm2,xmm3
DD2.exe+A50ABA: 77 08                 - ja DD2.exe+A50AC4
DD2.exe+A50ABC: 0F 28 D3              - movaps xmm2,xmm3
DD2.exe+A50ABF: F3 0F 5D 57 24        - minss xmm2,[rdi+24]
DD2.exe+A50AC4: 80 7F 2C 00           - cmp byte ptr [rdi+2C],00
// ---------- INJECTING HERE ----------
DD2.exe+A50AC8: F3 0F 11 57 20        - movss [rdi+20],xmm2
// ---------- DONE INJECTING  ----------
DD2.exe+A50ACD: 75 0C                 - jne DD2.exe+A50ADB
DD2.exe+A50ACF: 0F 2F D7              - comiss xmm2,xmm7
DD2.exe+A50AD2: 73 07                 - jae DD2.exe+A50ADB
DD2.exe+A50AD4: C7 47 20 00 00 00 00  - mov [rdi+20],00000000
DD2.exe+A50ADB: 48 8B 5C 24 50        - mov rbx,[rsp+50]
DD2.exe+A50AE0: 0F 28 7C 24 20        - movaps xmm7,[rsp+20]
DD2.exe+A50AE5: 48 8B 6C 24 60        - mov rbp,[rsp+60]
DD2.exe+A50AEA: 0F 28 74 24 30        - movaps xmm6,[rsp+30]
DD2.exe+A50AEF: 48 83 C4 40           - add rsp,40
DD2.exe+A50AF3: 5F                    - pop rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"money"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DD2.exe
  Version: 
  Date   : 2024-03-24
  Author : ichir

  This script does blah blah blah
}

define(address,"DD2.exe"+3D56222)
define(bytes,41 89 8E 98 02 00 00 4D 85 FF 74 0B 49 8B D7)

[ENABLE]

assert(address,bytes)
alloc(newmem,$10)

label(code)
label(return)

newmem:

code:
  mov [r14+00000298],ffff
  test r15,r15
  je DD2.exe+3D56239
  mov rdx,r15
  jmp return

address:
  jmp far newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [r14+00000298],ecx
  // test r15,r15
  // je DD2.exe+3D56239
  // mov rdx,r15

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: DD2.exe+3D56222

DD2.exe+3D561F6: 79 0A                    - jns DD2.exe+3D56202
DD2.exe+3D561F8: 48 8D 84 24 90 00 00 00  - lea rax,[rsp+00000090]
DD2.exe+3D56200: EB 17                    - jmp DD2.exe+3D56219
DD2.exe+3D56202: 81 FA FF E0 F5 05        - cmp edx,05F5E0FF
DD2.exe+3D56208: 48 8D 84 24 80 00 00 00  - lea rax,[rsp+00000080]
DD2.exe+3D56210: 48 8D 4C 24 20           - lea rcx,[rsp+20]
DD2.exe+3D56215: 48 0F 4D C1              - cmovge rax,rcx
DD2.exe+3D56219: 8B 18                    - mov ebx,[rax]
DD2.exe+3D5621B: 41 2B DC                 - sub ebx,r12d
DD2.exe+3D5621E: 42 8D 0C 23              - lea ecx,[rbx+r12]
// ---------- INJECTING HERE ----------
DD2.exe+3D56222: 41 89 8E 98 02 00 00     - mov [r14+00000298],ecx
// ---------- DONE INJECTING  ----------
DD2.exe+3D56229: 4D 85 FF                 - test r15,r15
DD2.exe+3D5622C: 74 0B                    - je DD2.exe+3D56239
DD2.exe+3D5622E: 49 8B D7                 - mov rdx,r15
DD2.exe+3D56231: 48 8B CE                 - mov rcx,rsi
DD2.exe+3D56234: E8 A7 60 67 FC           - call DD2.exe+3CC2E0
DD2.exe+3D56239: 4C 8B BC 24 88 00 00 00  - mov r15,[rsp+00000088]
DD2.exe+3D56241: 45 84 ED                 - test r13b,r13b
DD2.exe+3D56244: 74 6B                    - je DD2.exe+3D562B1
DD2.exe+3D56246: 85 ED                    - test ebp,ebp
DD2.exe+3D56248: 7F 55                    - jg DD2.exe+3D5629F
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"JP"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DD2.exe
  Version: 
  Date   : 2024-03-24
  Author : ichir

  This script does blah blah blah
}

define(address,"DD2.exe"+331C86)
define(bytes,89 4B 30 48 8B 40 70 48 8B 48 10 44 8B 41 10)

[ENABLE]

assert(address,bytes)
alloc(newmem,$10)

label(code)
label(return)

newmem:

code:
  mov [rbx+30],ffff
  mov rax,[rax+70]
  mov rcx,[rax+10]
  mov r8d,[rcx+10]
  jmp return

address:
  jmp far newmem
  nop
return:

[DISABLE]

address:
  db bytes
  // mov [rbx+30],ecx
  // mov rax,[rax+70]
  // mov rcx,[rax+10]
  // mov r8d,[rcx+10]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: DD2.exe+331C86

DD2.exe+331C5E: 48 85 C0                       - test rax,rax
DD2.exe+331C61: 0F 84 95 00 00 00              - je DD2.exe+331CFC
DD2.exe+331C67: 48 83 78 70 00                 - cmp qword ptr [rax+70],00
DD2.exe+331C6C: 0F 84 8A 00 00 00              - je DD2.exe+331CFC
DD2.exe+331C72: 48 8B 48 70                    - mov rcx,[rax+70]
DD2.exe+331C76: 48 83 79 10 00                 - cmp qword ptr [rcx+10],00
DD2.exe+331C7B: 74 7F                          - je DD2.exe+331CFC
DD2.exe+331C7D: 8B 4B 30                       - mov ecx,[rbx+30]
DD2.exe+331C80: 48 8B D5                       - mov rdx,rbp
DD2.exe+331C83: 2B 48 48                       - sub ecx,[rax+48]
// ---------- INJECTING HERE ----------
DD2.exe+331C86: 89 4B 30                       - mov [rbx+30],ecx
// ---------- DONE INJECTING  ----------
DD2.exe+331C89: 48 8B 40 70                    - mov rax,[rax+70]
DD2.exe+331C8D: 48 8B 48 10                    - mov rcx,[rax+10]
DD2.exe+331C91: 44 8B 41 10                    - mov r8d,[rcx+10]
DD2.exe+331C95: 48 8B CE                       - mov rcx,rsi
DD2.exe+331C98: E8 A3 C1 D1 00                 - call DD2.exe+104DE40
DD2.exe+331C9D: C7 87 0C 03 00 00 00 00 00 3F  - mov [rdi+0000030C],3F000000
DD2.exe+331CA7: 41 B8 14 00 00 00              - mov r8d,00000014
DD2.exe+331CAD: 48 8B 05 9C 90 A1 0F           - mov rax,[DD2.exe+FD4AD50]
DD2.exe+331CB4: 48 8B CE                       - mov rcx,rsi
DD2.exe+331CB7: 48 8B D7                       - mov rdx,rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"max_hp"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DD2.exe
  Version: 
  Date   : 2024-03-24
  Author : ichir

  This script does blah blah blah
}

define(address,"DD2.exe"+164B8B9)
define(bytes,89 83 34 01 00 00 E8 5C F2 FC FF 0F 57 C9)

[ENABLE]

assert(address,bytes)
alloc(newmem,$10)

label(code)
label(return)

newmem:

code:
  //mov [r14+00000298],ecx
  call DD2.exe+161AB20
  xorps xmm1,xmm1
  jmp return

address:
  jmp far newmem
return:

[DISABLE]

address:
  db bytes
  // mov [rbx+00000134],eax
  // call DD2.exe+161AB20
  // xorps xmm1,xmm1

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: DD2.exe+164B8B9

DD2.exe+164B897: 76 07              - jna DD2.exe+164B8A0
DD2.exe+164B899: 48 8D 44 24 60     - lea rax,[rsp+60]
DD2.exe+164B89E: EB 11              - jmp DD2.exe+164B8B1
DD2.exe+164B8A0: 0F 2F C7           - comiss xmm0,xmm7
DD2.exe+164B8A3: 48 8D 44 24 58     - lea rax,[rsp+58]
DD2.exe+164B8A8: 48 8D 4C 24 68     - lea rcx,[rsp+68]
DD2.exe+164B8AD: 48 0F 46 C1        - cmovbe rax,rcx
DD2.exe+164B8B1: 8B 00              - mov eax,[rax]
DD2.exe+164B8B3: 48 8B D3           - mov rdx,rbx
DD2.exe+164B8B6: 48 8B CF           - mov rcx,rdi
// ---------- INJECTING HERE ----------
DD2.exe+164B8B9: 89 83 34 01 00 00  - mov [rbx+00000134],eax
// ---------- DONE INJECTING  ----------
DD2.exe+164B8BF: E8 5C F2 FC FF     - call DD2.exe+161AB20
DD2.exe+164B8C4: 0F 57 C9           - xorps xmm1,xmm1
DD2.exe+164B8C7: 45 33 C9           - xor r9d,r9d
DD2.exe+164B8CA: F3 0F 5A C8        - cvtss2sd xmm1,xmm0
DD2.exe+164B8CE: 48 8B D3           - mov rdx,rbx
DD2.exe+164B8D1: 48 8B CF           - mov rcx,rdi
DD2.exe+164B8D4: 66 0F 5A D1        - cvtpd2ps xmm2,xmm1
DD2.exe+164B8D8: 48 8B 5C 24 50     - mov rbx,[rsp+50]
DD2.exe+164B8DD: 0F 28 74 24 30     - movaps xmm6,[rsp+30]
DD2.exe+164B8E2: 0F 28 7C 24 20     - movaps xmm7,[rsp+20]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"exp"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DD2.exe
  Version: 
  Date   : 2024-03-24
  Author : ichir

  This script does blah blah blah
}

define(address,"DD2.exe"+4DC08D)
define(bytes,41 01 4C 24 24 48 8B CD 44 8B 4F 18 8B 94 24 B0 00 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$10)

label(code)
label(return)

newmem:

code:
  //add [r12+24],ecx
  add [r12+24],ffff
  mov rcx,rbp
  mov r9d,[rdi+18]
  mov edx,[rsp+000000B0]
  jmp return

address:
  jmp far newmem
  nop 5
return:

[DISABLE]

address:
  db bytes
  // add [r12+24],ecx
  // mov rcx,rbp
  // mov r9d,[rdi+18]
  // mov edx,[rsp+000000B0]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: DD2.exe+4DC08D

DD2.exe+4DC069: 49 8B D7                 - mov rdx,r15
DD2.exe+4DC06C: 48 8B CD                 - mov rcx,rbp
DD2.exe+4DC06F: E8 BC 01 EF FF           - call DD2.exe+3CC230
DD2.exe+4DC074: 4D 85 E4                 - test r12,r12
DD2.exe+4DC077: 74 55                    - je DD2.exe+4DC0CE
DD2.exe+4DC079: 48 8B 7C 24 40           - mov rdi,[rsp+40]
DD2.exe+4DC07E: 48 85 FF                 - test rdi,rdi
DD2.exe+4DC081: 74 4B                    - je DD2.exe+4DC0CE
DD2.exe+4DC083: 8B 8C 24 A8 00 00 00     - mov ecx,[rsp+000000A8]
DD2.exe+4DC08A: 4D 8B C4                 - mov r8,r12
// ---------- INJECTING HERE ----------
DD2.exe+4DC08D: 41 01 4C 24 24           - add [r12+24],ecx
// ---------- DONE INJECTING  ----------
DD2.exe+4DC092: 48 8B CD                 - mov rcx,rbp
DD2.exe+4DC095: 44 8B 4F 18              - mov r9d,[rdi+18]
DD2.exe+4DC099: 8B 94 24 B0 00 00 00     - mov edx,[rsp+000000B0]
DD2.exe+4DC0A0: 48 89 5C 24 28           - mov [rsp+28],rbx
DD2.exe+4DC0A5: C6 44 24 20 01           - mov byte ptr [rsp+20],01
DD2.exe+4DC0AA: E8 51 38 00 00           - call DD2.exe+4DF900
DD2.exe+4DC0AF: 44 8B 8C 24 B8 00 00 00  - mov r9d,[rsp+000000B8]
DD2.exe+4DC0B7: 4C 8B C7                 - mov r8,rdi
DD2.exe+4DC0BA: 8B 94 24 B0 00 00 00     - mov edx,[rsp+000000B0]
DD2.exe+4DC0C1: 48 8B CD                 - mov rcx,rbp
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
