<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>4</ID>
      <Description>"magazine"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MonsterHunterWorld.exe
  Version: 
  Date   : 2024-03-12
  Author : ichir

  This script does blah blah blah
}

define(address,"MonsterHunterWorld.exe"+26E14B)
define(bytes,89 41 08 8B C2)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"MonsterHunterWorld.exe"+26E14B)

label(code)
label(return)

newmem:

code:
  //mov [rcx+08],eax
  mov eax,edx
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // mov [rcx+08],eax
  // mov eax,edx

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: MonsterHunterWorld.exe+26E14B

MonsterHunterWorld.exe+26E138: 89 51 08              - mov [rcx+08],edx
MonsterHunterWorld.exe+26E13B: C3                    - ret 
MonsterHunterWorld.exe+26E13C: CC                    - int 3 
MonsterHunterWorld.exe+26E13D: CC                    - int 3 
MonsterHunterWorld.exe+26E13E: CC                    - int 3 
MonsterHunterWorld.exe+26E13F: CC                    - int 3 
MonsterHunterWorld.exe+26E140: 44 8B 41 08           - mov r8d,[rcx+08]
MonsterHunterWorld.exe+26E144: 41 8B C0              - mov eax,r8d
MonsterHunterWorld.exe+26E147: 2B C2                 - sub eax,edx
MonsterHunterWorld.exe+26E149: 78 06                 - js MonsterHunterWorld.exe+26E151
// ---------- INJECTING HERE ----------
MonsterHunterWorld.exe+26E14B: 89 41 08              - mov [rcx+08],eax
// ---------- DONE INJECTING  ----------
MonsterHunterWorld.exe+26E14E: 8B C2                 - mov eax,edx
MonsterHunterWorld.exe+26E150: C3                    - ret 
MonsterHunterWorld.exe+26E151: C7 41 08 00 00 00 00  - mov [rcx+08],00000000
MonsterHunterWorld.exe+26E158: 41 8B C0              - mov eax,r8d
MonsterHunterWorld.exe+26E15B: C3                    - ret 
MonsterHunterWorld.exe+26E15C: CC                    - int 3 
MonsterHunterWorld.exe+26E15D: CC                    - int 3 
MonsterHunterWorld.exe+26E15E: CC                    - int 3 
MonsterHunterWorld.exe+26E15F: CC                    - int 3 
MonsterHunterWorld.exe+26E160: 48 83 EC 48           - sub rsp,48
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"machine gun"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MonsterHunterWorld.exe
  Version: 
  Date   : 2024-03-12
  Author : ichir

  This script does blah blah blah
}

define(address,"MonsterHunterWorld.exe"+214DC82)
define(bytes,F3 0F 11 91 58 23 00 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"MonsterHunterWorld.exe"+214DC82)

label(code)
label(return)

newmem:

code:
  movss [rcx+00002358],xmm2
  mov [rcx+00002358],42480000
  jmp return

address:
  jmp newmem
  nop 3
return:

[DISABLE]

address:
  db bytes
  // movss [rcx+00002358],xmm2

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: MonsterHunterWorld.exe+214DC82

MonsterHunterWorld.exe+214DC6A: C3                             - ret 
MonsterHunterWorld.exe+214DC6B: CC                             - int 3 
MonsterHunterWorld.exe+214DC6C: CC                             - int 3 
MonsterHunterWorld.exe+214DC6D: CC                             - int 3 
MonsterHunterWorld.exe+214DC6E: CC                             - int 3 
MonsterHunterWorld.exe+214DC6F: CC                             - int 3 
MonsterHunterWorld.exe+214DC70: F3 0F 10 91 58 23 00 00        - movss xmm2,[rcx+00002358]
MonsterHunterWorld.exe+214DC78: 0F 57 C0                       - xorps xmm0,xmm0
MonsterHunterWorld.exe+214DC7B: F3 0F 5C D1                    - subss xmm2,xmm1
MonsterHunterWorld.exe+214DC7F: 0F 2F D0                       - comiss xmm2,xmm0
// ---------- INJECTING HERE ----------
MonsterHunterWorld.exe+214DC82: F3 0F 11 91 58 23 00 00        - movss [rcx+00002358],xmm2
// ---------- DONE INJECTING  ----------
MonsterHunterWorld.exe+214DC8A: 77 0A                          - ja MonsterHunterWorld.exe+214DC96
MonsterHunterWorld.exe+214DC8C: C7 81 58 23 00 00 00 00 00 00  - mov [rcx+00002358],00000000
MonsterHunterWorld.exe+214DC96: C3                             - ret 
MonsterHunterWorld.exe+214DC97: CC                             - int 3 
MonsterHunterWorld.exe+214DC98: CC                             - int 3 
MonsterHunterWorld.exe+214DC99: CC                             - int 3 
MonsterHunterWorld.exe+214DC9A: CC                             - int 3 
MonsterHunterWorld.exe+214DC9B: CC                             - int 3 
MonsterHunterWorld.exe+214DC9C: CC                             - int 3 
MonsterHunterWorld.exe+214DC9D: CC                             - int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"item"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MonsterHunterWorld.exe
  Version: 
  Date   : 2024-03-12
  Author : ichir

  This script does blah blah blah
}

define(address,"MonsterHunterWorld.exe"+11CDD50)
define(bytes,89 51 0C 85 D2)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000,"MonsterHunterWorld.exe"+11CDD50)

label(code)
label(return)

newmem:

code:
  mov [rcx+0C],63
  test edx,edx
  jmp return

address:
  jmp newmem
return:

[DISABLE]

address:
  db bytes
  // mov [rcx+0C],edx
  // test edx,edx

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: MonsterHunterWorld.exe+11CDD50

MonsterHunterWorld.exe+11CDD43: 48 83 C4 20  - add rsp,20
MonsterHunterWorld.exe+11CDD47: 5F           - pop rdi
MonsterHunterWorld.exe+11CDD48: C3           - ret 
MonsterHunterWorld.exe+11CDD49: CC           - int 3 
MonsterHunterWorld.exe+11CDD4A: CC           - int 3 
MonsterHunterWorld.exe+11CDD4B: CC           - int 3 
MonsterHunterWorld.exe+11CDD4C: CC           - int 3 
MonsterHunterWorld.exe+11CDD4D: CC           - int 3 
MonsterHunterWorld.exe+11CDD4E: CC           - int 3 
MonsterHunterWorld.exe+11CDD4F: CC           - int 3 
// ---------- INJECTING HERE ----------
MonsterHunterWorld.exe+11CDD50: 89 51 0C     - mov [rcx+0C],edx
// ---------- DONE INJECTING  ----------
MonsterHunterWorld.exe+11CDD53: 85 D2        - test edx,edx
MonsterHunterWorld.exe+11CDD55: 75 09        - jne MonsterHunterWorld.exe+11CDD60
MonsterHunterWorld.exe+11CDD57: 41 80 F8 01  - cmp r8b,01
MonsterHunterWorld.exe+11CDD5B: 75 03        - jne MonsterHunterWorld.exe+11CDD60
MonsterHunterWorld.exe+11CDD5D: 89 51 08     - mov [rcx+08],edx
MonsterHunterWorld.exe+11CDD60: C3           - ret 
MonsterHunterWorld.exe+11CDD61: CC           - int 3 
MonsterHunterWorld.exe+11CDD62: CC           - int 3 
MonsterHunterWorld.exe+11CDD63: CC           - int 3 
MonsterHunterWorld.exe+11CDD64: CC           - int 3 
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+55ABBD</Address>
      <Comment>Put cost into rsp+50 from r15. 
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+5EB2AE</Address>
      <Comment>compare cost with count
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+650C12</Address>
      <Comment>reads currency
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+6611AA</Address>
      <Comment>r12 = playerdi_ph, r13=HumanAI
r8+24 = goal, r8+28 = current
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+67FCA0</Address>
      <Comment>rcx = cable object
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+8D4BC8</Address>
      <Comment>something interesting here maybe
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9216C5</Address>
      <Comment>something interesgin gmaybe
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+92ED7B</Address>
      <Comment>rbx last value before decrease arrow ammo
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+92EE79</Address>
      <Comment>Read ammo count into edx
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+92EE85</Address>
      <Comment>Decrease ammo count?
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+980192</Address>
      <Comment>cost is r14d, eax is how much currency I have
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0B68</Address>
      <Comment>Player position
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0B7A</Address>
      <Comment>Player Position
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0B85</Address>
      <Comment>Player Position
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+9E0BC5</Address>
      <Comment>cable length used into cable object
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+BEEE5F</Address>
      <Comment>Read all skills
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+D01238</Address>
      <Comment>copy cost from r14d to esi
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+E1E647</Address>
      <Comment>Challenge Timer modified
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+E916B3</Address>
      <Comment>crafting cost
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+EC5670</Address>
      <Comment>Read weapon durability nonstop + random
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+11719CD</Address>
      <Comment>nonstop read cable length
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+11719E0</Address>
      <Comment>Max Length of Cable
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1171A61</Address>
      <Comment>Cable Length Left, xmm0 = length used
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1173AEC</Address>
      <Comment>rdi - bufftimeInstance struct
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+117C47B</Address>
      <Comment>GuiPlayerLevelTooltip for number of upgrade points
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+141F262</Address>
      <Comment>Maybe something
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1442F86</Address>
      <Comment>Consumable display
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+14D01B1</Address>
      <Comment>Cost is inserted into r15. 
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+14D02CD</Address>
      <Comment>Jump into code that reads inventory value on cost tooltip
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+1694FAF</Address>
      <Comment>playervalues
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+16B81CE</Address>
      <Comment>Containes Equipped Values?
R10 = 1 on melee item
RBP = 00 or 01
RAX = 00 on throwable (dagger, flare)
R11 = 2000000000000000  - on dagger flare
RDX = 00 on melee
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+16B81D2</Address>
      <Comment>Compare value with ??
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+16C6381</Address>
      <Comment>compare safe values with..
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17A18B0</Address>
      <Comment>If stamina is 174, this value is 1.74. 
Then gets multiplied
rbx = cguiplayerdata 2
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17AC9B4</Address>
      <Comment>compare bounty goal
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17B5930</Address>
      <Comment>%s - moves DayNightCycle to Rax
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17B5937</Address>
      <Comment>moves cguiworlddata location to rsi
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17B594B</Address>
      <Comment>rax = daynightCycle
+10 value = 0.39
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+17ED1A1</Address>
      <Comment>r14+38=FactionXP, +8=level, rcx=level
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+190803F</Address>
      <Comment>Crafting Subroutine
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+19EAC5B</Address>
      <Comment>inventory code
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"gamedll_ph_x64_rwdi.dll"+B8F1194</Address>
      <Comment>rbx, rdx - new value for ammo
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
